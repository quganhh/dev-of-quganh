<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        MSb9P/Rs4R7iFfADAAAAAElFTkSuQmCC
</value>
  </data>
</root>